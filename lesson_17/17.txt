✅ Парні числа: Напишіть генератор, який буде генерувати послідовність парних чисел.
✅ Факторіали: Створіть генератор, який буде обчислювати факторіал для заданого числа.
✅ Прості числа: Реалізуйте генератор для генерації послідовності простих чисел.
✅ Великі файли: Напишіть генератор, який буде читати великий текстовий файл рядок за рядком
✅ Обернений рядок: Створіть генератор, який буде повертати рядки зі списку у зворотньому порядку.
✅ Словники зі списку ключів та значень: Напишіть генератор для створення словника зі списку ключів та відповідних значень.
✅ Видалення дублікатів: Реалізуйте генератор, який буде забирати дублікати зі списку.
✅ Об'єднання списків: Створіть генератор, який об'єднає декілька списків в один.
✅ Фільтрація: Напишіть генератор, який відфільтрує числа менше заданого значення з послідовності.
✅ Видалення символів: Реалізуйте генератор для видалення певного символу з рядка.
✅ Паралельна ітерація: Створіть генератор, який дозволить ітерувати через два списки паралельно.
✅ Підрахунок голосних: Напишіть генератор для підрахунку кількості голосних в рядку.
✅ Множення матриці на вектор: Реалізуйте генератор для обчислення добутку матриці на вектор.
✅ Вибірка зі списку: Створіть генератор, який буде вибирати певну кількість випадкових елементів зі списку.
✅ Обрізка рядка: Напишіть генератор, який буде обрізати заданий рядок до певної довжини.
✅ Об'єднання рядків зі списку: Реалізуйте генератор для об'єднання рядків зі списку в один.
✅ Генерація псевдовипадкових чисел: Напишіть генератор, який буде генерувати послідовність псевдовипадкових чисел.
✅ Делегування роботи генераторам: Створіть генератор, який буде делегувати роботу іншому генератору залежно від певних умов.
✅ Видалення спеціальних символів: Реалізуйте генератор для видалення спеціальних символів з рядка.
✅ Парсинг даних: Напишіть генератор для парсингу структурованих даних, таких як JSON або XML.


Декоратори
✅ Моніторинг часу виконання: Напишіть декоратор, який буде вимірювати час виконання функції і виводити його.
✅ Логування викликів функцій: Створіть декоратор, який буде логувати виклики функцій разом з аргументами.
✅ Перевірка аргументів функції: Напишіть декоратор, який буде перевіряти, чи всі аргументи функції є числами.
✅ Кешування результатів функції: Створіть декоратор, який буде кешувати результати функції для певних аргументів.
✅ Обмеження кількості викликів: Напишіть декоратор, який буде обмежувати кількість викликів функції.
✅ Перевірка прав доступу: Створіть декоратор для перевірки прав доступу користувача до функції.
✅ Логування виключень: Напишіть декоратор, який буде логувати виключення, якщо воно виникає в процесі виконання функції.
✅ Вимірювання виконання з обмеженням часу: Створіть декоратор, який вимірює час виконання функції, але при цьому обмежує час виконання.
✅ Збереження історії викликів: Напишіть декоратор, який буде зберігати історію викликів функції разом з аргументами.
✅ Перевірка типів аргументів: Створіть декоратор, який буде перевіряти, чи відповідають типи аргументів певному шаблону.
✅ Конвертація результату в інший формат: Напишіть декоратор, який буде конвертувати результат функції в інший формат, наприклад, у JSON.
✅ Обробка спеціальних станів: Створіть декоратор, який буде обробляти спеціальні стани під час виконання функції.
✅ Логування параметрів і результатів: Напишіть декоратор, який буде логувати параметри виклику та результати функції.
✅ Кастомні логи: Створіть декоратор, який дозволить користувачу задавати кастомні повідомлення для логування.
✅ Перевірка правильності реалізації функції: Напишіть декоратор, який буде перевіряти, чи функція повертає правильний результат.
✅ Автоматичне виведення документації: Створіть декоратор, який буде автоматично додавати документацію з іншої функції.
✅ Зміна порядку аргументів: Напишіть декоратор, який буде змінювати порядок аргументів функції.
✅ Обробка реініціалізації: Створіть декоратор, який буде обробляти реініціалізацію функції в певних умовах.
✅ Повторне виконання функції: Напишіть декоратор, який дозволить автоматично повторювати виконання функції при певних умовах.
✅ Обробка великих об'ємів даних: Створіть декоратор, який буде автоматично обробляти великі об'єми даних, розбиваючи їх на частини.