Легкі
Інкапсуляція (Encapsulation):

✅ Створіть клас Car, у якому зінкапсульовано приватну змінну fuel_level. Напишіть методи get_fuel_level() та add_fuel(), які дозволяють отримувати і змінювати це значення.

✅ Створіть клас Person, у якому інкапсульовано приватну змінну age. Напишіть методи get_age() та set_age(), які дозволяють отримувати та встановлювати вік об'єкта.

Успадкування (Inheritance):

✅ Створіть базовий клас Shape, з методом area(). Створіть підкласи Circle та Rectangle, які успадковують Shape та реалізовують власні методи area().

✅ Створіть клас Animal з методом speak(). Створіть підкласи Dog та Cat, які успадковують Animal та реалізовують свої власні методи speak().

Поліморфізм (Polymorphism):

✅ Створіть список об'єктів різних типів (наприклад, екземпляри Circle, Rectangle та Triangle). Використовуйте цей список для обчислення площі кожного об'єкта і друку результату.

✅ Створіть функцію animal_speak(animal), яка приймає об'єкт типу Animal та викликає метод speak(). Використовуйте цю функцію для різних об'єктів Animal.

✅ Створіть базовий клас Vehicle з методом drive(). Створіть підкласи Car та Bike, які успадковують Vehicle та реалізовують свої методи drive(). Створіть список з об'єктами обох типів транспорту та викличте метод drive() для кожного.

Створіть клас Employee з методом calculate_salary(). Створіть підкласи Manager та Developer, які успадковують Employee та реалізовують свої власні методи calculate_salary(). Створіть список з працівниками обох типів та викличте метод calculate_salary() для кожного.

Створіть базовий клас Animal з методом move(). Створіть підкласи Bird, Fish, та Dog, які успадковують Animal та реалізовують свої методи move(). Створіть список з різних типів тварин та викличте метод move() для кожного.

Створіть клас Shape з методом draw(). Створіть підкласи Circle, Rectangle, та Triangle, які успадковують Shape та реалізовують свої методи draw(). Створіть список різних фігур та викличте метод draw() для кожної з них.

Важкі
Банківський рахунок: Створіть клас BankAccount, який має приватні змінні балансу і номеру рахунку. Реалізуйте методи для додавання та зняття коштів, а також метод для перевірки балансу. Забезпечте захист від несанкціонованого доступу до змінних.

Контейнери з даними: Створіть клас, який реалізує власний список (аналог списку у Python). Захистіть його від додавання і видалення елементів безпосередньо зі списку.

Авторизація: Розробіть систему авторизації з використанням класу User. Зберігайте інформацію про користувачів (логіни та паролі) в приватних змінних. Реалізуйте методи для перевірки пароля та створення нових облікових записів.

Робота з файлами: Створіть клас для роботи з файлами, який забезпечує інкапсуляцію відкриття, читання та запису файлів. Захистіть від несанкціонованого доступу до файлових операцій.

Криптографія: Розробіть клас для шифрування та дешифрування тексту. Захистіть ключі та методи шифрування від доступу ззовні.

База даних: Створіть клас для взаємодії з базою даних. Забезпечте інкапсуляцію запитів до бази даних і захистіть конфіденційні дані.

Мережеві запити: Реалізуйте клас для відправлення мережевих запитів (наприклад, HTTP запитів) та обробки відповідей. Захистіть дані, що відправляються та отримуються через мережу.

Керування ресурсами: Створіть клас для керування ресурсами (наприклад, відкриття та закриття файлів, сокетів або з'єднань з базою даних). Захистіть ресурси від незаконного доступу.

Парсинг даних: Розробіть клас для парсингу та обробки структурованих даних (наприклад, XML або JSON). Забезпечте інкапсуляцію парсингу та доступу до даних.

Керування конфігурацією: Створіть клас для зберігання та зміни конфігураційних параметрів додатку. Захистіть конфігураційні дані від несанкціонованого доступу.