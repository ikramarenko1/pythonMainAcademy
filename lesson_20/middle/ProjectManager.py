# –ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç—É: –°—Ç–≤–æ—Ä—ñ—Ç—å –∫–ª–∞—Å, —è–∫–∏–π –¥–æ–∑–≤–æ–ª–∏—Ç—å —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ —Ç–∞ –∫–µ—Ä—É–≤–∞—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏,
# –≤–∫–ª—é—á–∞—é—á–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å, –ø—Ä–∏—Å–≤–æ—î–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º —ñ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –ø—Ä–æ–µ–∫—Ç—É.
from enum import Enum


class Status(Enum):
    NEW = 'üÜï –ù–æ–≤–µ.'
    ON_HOLD = '‚è≥ –ù–∞ –æ—ái–∫—É–≤–∞–Ω–Ωi.'
    IN_PROGRESS = 'üßë‚Äçüíª –í —Ä–æ–±–æ—Ç—ñ.'
    COMPLETED = '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ!'


class User:
    def __init__(self, name, user_type):
        self.name = name
        self.user_type = user_type
        self.projects = []

    def __str__(self):
        return f'‚ÑπÔ∏è I–Ω—Ñ–æ—Ä–º–∞—Üi—è –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:\n' \
               f'   –Ü–º`—è: {self.name}\n' \
               f'   –¢–∏–ø –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {self.user_type}\n' \
               f'   –ü—Ä–æ–µ–∫—Ç–∏: ' + ', '.join([f'{project.name}: {project.status.value}'
                                            for project in self.projects])


class Task:
    def __init__(self, name):
        self.name = name
        self.user = None
        self.status = Status.NEW

    def __str__(self):
        return f'‚ÑπÔ∏è I–Ω—Ñ–æ—Ä–º–∞—Üi—è –ø—Ä–æ —Ç–∞—Å–∫:\n' \
               f'   –ù–∞–∑–≤–∞: {self.name}\n' \
               f'   –íi–¥–ø–æ–≤i–¥–∞–ª—å–Ω–∏–π: {self.user.name}\n' \
               f'   –°—Ç–∞—Ç—É—Å: {self.status.value}'

    def set_user(self, user):
        if isinstance(user, User):
            self.user = user
            user.projects.append(self)

            print(f'{self.name.upper()}: ‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user.name} –Ω–∞–∑–Ω–∞—á–µ–Ω–æ –≤i–¥–ø–æ–≤i–¥–∞–ª—å–Ω–∏–º.')
        else:
            print(f'{self.name.upper()}: ‚ùå –ù–µ–º–æ–∂–ª–∏–≤–æ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ {user} –≤i–¥–ø–æ–≤i–¥–∞–ª—å–Ω–∏–º.')

    def set_status(self, status):
        if isinstance(status, Status):
            self.status = status
            print(f'{self.name.upper()}: ‚úÖ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å—Ç–∞—Ç—É—Å {status}.')
        else:
            print(f'{self.name.upper()}: ‚ùå –ù–µ–º–æ–∂–ª–∏–≤–æ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å {status}.')

    def get_status(self):
        print(f'{self.name.upper()}: ‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å {self.status.value}')


class Project:
    def __init__(self, name):
        self.name = name
        self.tasks = []
        self.status = Status.ON_HOLD

    def __str__(self):
        return f'‚ÑπÔ∏è I–Ω—Ñ–æ—Ä–º–∞—Üi—è –ø—Ä–æ –ø—Ä–æ–µ–∫—Ç:\n' \
               f'   –ù–∞–∑–≤–∞: {self.name}\n' \
               f'   –ó–∞–≤–¥–∞–Ω–Ω—è: {", ".join([task.name for task in self.tasks])}\n' \
               f'   –°—Ç–∞—Ç—É—Å: {self.status.value}'

    def add_task(self, task):
        if isinstance(task, Task):
            self.tasks.append(task)
            print(f'{self.name.upper()}: ‚úÖ –î–æ–¥–∞–Ω–æ —Ç–∞—Å–∫ {task.name} –¥–æ –ø—Ä–æ–µ–∫—Ç—É.')
        else:
            print(f'{self.name.upper()}: ‚ùå –ù–µ–º–æ–∂–ª–∏–≤–æ –¥–æ–¥–∞—Ç–∏ {task} –¥–æ –ø—Ä–æ–µ–∫—Ç—É.')

    def remove_task(self, task):
        if isinstance(task, Task):
            if task in self.tasks:
                self.tasks.append(task)
                print(f'{self.name.upper()}: ‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ —Ç–∞—Å–∫ {task.name} –∑ –ø—Ä–æ–µ–∫—Ç—É.')
            else:
                print(f'{self.name.upper()}: ‚ùå –ù–µ–º–æ–∂–ª–∏–≤–æ –≤–∏–¥–∞–ª–∏—Ç–∏ {task.name} –∑ –ø—Ä–æ–µ–∫—Ç—É, —Ç–∞–∫ —è–∫ –π–æ–≥–æ –Ω–µ–º–∞—î.')
        else:
            print(f'{self.name.upper()}: ‚ùå –ù–µ–º–æ–∂–ª–∏–≤–æ –¥–æ–¥–∞—Ç–∏ {task} –¥–æ –ø—Ä–æ–µ–∫—Ç—É.')

    def set_status(self, status):
        if isinstance(status, Status):
            self.status = status
            print(f'{self.name.upper()}: ‚úÖ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å—Ç–∞—Ç—É—Å {status.value}.')
        else:
            print(f'{self.name.upper()}: ‚ùå –ù–µ–º–æ–∂–ª–∏–≤–æ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å {status}.')

    def get_all_tasks(self):
        return ", ".join([f'{task.name}: {task.status}' for task in self.tasks])


# ==== MAIN ====
ilya = User('Ilya', 'tech')
maxim = User('Maxim', 'tech')
sasha = User('Sasha', 'copywriter')
albert = User('Albert', 'designer')

make_ui = Task('Make UX/UI')
make_module = Task('Make Finance Module')
make_module2 = Task('Make Finance Module 2')
make_adv_post = Task('Make Advertising Post')

project = Project('New Project')

make_ui.set_user(albert)
make_module.set_user(ilya)
make_module2.set_user(maxim)
make_adv_post.set_user(sasha)
print('----' * 3)

project.add_task(make_ui)
project.add_task(make_module)
project.add_task(make_module2)
project.add_task(make_adv_post)
print('----' * 3)

print(project)
print('----' * 3)

make_ui.set_status(Status.COMPLETED)
make_module.set_status(Status.COMPLETED)
print('----' * 3)

print(ilya)
print(sasha)
